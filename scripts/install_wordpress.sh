#!/bin/bash

USERNAME="$1"
APPNAME="$2"
TITLE="$3"
DOMAIN="$4"
ADMINUSER="$5"
ADMINEMAIL="$6"
ADMINPASS="$7"
DBUSER="$8"
DBNAME="$9"
DBPASS="${10}"
DBPREFIX="${11}"

echo -e "Create database and user for wordpress"
mysql -uroot -e "CREATE DATABASE IF NOT EXISTS $DBNAME /*\\!40100 DEFAULT CHARACTER SET utf8_general_ci */;"
mysql -uroot -e "CREATE USER IF NOT EXISTS '$DBUSER'@'localhost' IDENTIFIED BY '$DBPASS';GRANT ALL PRIVILEGES ON *.* TO '$DBUSER'@'localhost';FLUSH PRIVILEGES;"

echo -e "Download wp-cli"
curl -o /home/$USERNAME/wp-cli.phar https://raw.githubusercontent.com/wp-cli/builds/gh-pages/phar/wp-cli.phar
chmod 777 /home/$USERNAME/wp-cli.phar
mv /home/$USERNAME/wp-cli.phar /usr/local/bin/wp

echo -e "Create app directory"
APPPATH="/home/$USERNAME/webapps/$APPNAME/"
sudo -u $USERNAME -i -- mkdir -p $APPPATH

# Download wordpress
echo -e "Download Wordpress"
sudo -u $USERNAME -i -- wp core download --path=$APPPATH --locale=en_US

# Config wordpress with username, database name and password.
sudo -u $USERNAME -i -- wp core config --path=$APPPATH --dbname=$DBNAME --dbuser=$DBUSER --dbpass=$DBPASS --dbprefix=$DBPREFIX

sudo -u $USERNAME -i -- wp core install --path=$APPPATH --title="$TITLE" --url=$DOMAIN --admin_user=$ADMINUSER --admin_email=$ADMINEMAIL --admin_password=$ADMINPASS

# Remove already enabled sites.
rm -r /etc/nginx/sites-enabled/*

# Make nginx configuration file.
NGINXCONFIG="/etc/nginx/sites-available/$APPNAME"

tee -a $NGINXCONFIG <<EOF
# Default server configuration
#
server {
        listen 80 default_server;
        listen [::]:80 default_server;

        # SSL configuration
        #
        # listen 443 ssl default_server;
        # listen [::]:443 ssl default_server;
        #
        # Note: You should disable gzip for SSL traffic.
        # See: https://bugs.debian.org/773332
        #
        # Read up on ssl_ciphers to ensure a secure configuration.
        # See: https://bugs.debian.org/765782
        #
        # Self signed certs generated by the ssl-cert package
        # Don't use them in a production server!
        #
        # include snippets/snakeoil.conf;

        root $APPPATH;

        # Add index.php to the list if you are using PHP
        index index.html index.htm index.nginx-debian.html;

        server_name _;

        location / {
                # First attempt to serve request as file, then
                # as directory, then fall back to displaying a 404.
                try_files $uri $uri/ =404;
        }

        # pass PHP scripts to FastCGI server
        #
        location ~ \.php$ {
               include snippets/fastcgi-php.conf;
        
               # With php-fpm (or other unix sockets):
               fastcgi_pass unix:/var/run/php/php8.0-fpm.sock;
               # With php-cgi (or other tcp sockets):
               # fastcgi_pass 127.0.0.1:9000;
        }

        # deny access to .htaccess files, if Apache's document root
        # concurs with nginx's one
        #
        #location ~ /\.ht {
        #       deny all;
        #}
}

# Virtual Host configuration for example.com
# You can move that to a different file under sites-available/ and symlink that
# to sites-enabled/ to enable it.
#server {
#       listen 80;
#       listen [::]:80;
#
#       server_name example.com;
#
#       root /var/www/example.com;
#       index index.html;
#
#       location / {
#               try_files $uri $uri/ =404;
#       }
#}
EOF

# Change file permission for nginx.conf
chmod 777 $NGINXCONFIG


# Make symbolic link
ln -s $NGINXCONFIG /etc/nginx/sites-enabled/$APPNAME

# Restart nginx service
systemctl restart nginx
